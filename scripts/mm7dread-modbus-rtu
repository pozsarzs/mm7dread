#!/bin/bash
# +----------------------------------------------------------------------------+
# | MM7DRead v0.4 * Status reader program for MM7D device                      |
# | Copyright (C) 2023 Pozs√°r Zsolt <pozsarzs@gmail.com>                       |
# | mm17dread-modbus-rtu                                                       |
# | Read all data from MM17D device with Modbus/RTU protocol                   |
# +----------------------------------------------------------------------------+

#   This program is free software: you can redistribute it and/or modify it
# under the terms of the European Union Public License 1.2 version.
#
#   This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.

# Exit codes:
#   0: normal exit
#   1: not enough parameter
#   2: there is not ... program
#   3: 
#   4: 
#   5: data retrieving error

# constants
PRGNAME="modpoll"
PRGARGS="-m rtu -b9600 -d 8 -s 1 -p none -a 1 -o 2 -1 -r 1"
# Used modpoll parameters:
#  -m rtu        MODBUS/RTU protocol
#  -b #          Baudrate
#  -d #          Databits
#  -s #          Stopbits
#  -p none       No parity
#  -a #          Slave address
#  -o #          Time-out in seconds
#  -1            Poll only once only
#  -r #          Start reference

# messages
MSG=("MM17DRead-Modbus/RTU data reader script v0.1\n" \
     "Usage:\n\t$0 device\n\t$0 -h\n\t$0 --help\n\t$0 -v\n\t$0 --version\n" \
     "ERROR #2: There is not '"$PRGNAME"' program!" \
     "ERROR #3: "\
     "ERROR #4: " \
     "ERROR #5: Data retrieving error!" \	
     "The '"$PRGNAME"' program required for the script to work\ncan be downloaded from https://www.modbusdriver.com/modpoll.html." \
     "\nRead discrete outputs (0xxxx):" \
     "\nRead discrete inputs (1xxxx):" \
     "\nRead input registers (3xxxx):" \
     "\nRead holding registers (4xxxx):")

function message()
{
  echo -e ${MSG[$1]}
}

function checkprog()
{
  if [ "$PRGNAME:" = "`whereis -b $PRGNAME`" ];
  then
    return 1
  else
    return 0
  fi
}

function readdevice()
{
  # Used modpoll parameters:
  #  -c #          Number of values to read
  #  -t 1          Discrete input data type
  #  -t 3          16-bit input register data type
  #  -t 4          16-bit output (holding) register data type (default)
  message 10
  if ! $PRGNAME $PRGARGS -c 3 -t 3 $1 | grep "\[";
  then
    return 1
  else
    message 9
    if ! $PRGNAME $PRGARGS -c 3 -t 1 $1 | grep "\[";
    then
      return 1
    else
      message 11
      if ! $PRGNAME $PRGARGS -c 28 -t 4 $1 | grep "\[";
      then
        return 1
      fi
      return 0
    fi
    return 0
  fi
  return 0
}

# main
if [ $# -eq 0 ]
then
  message 1
  exit 1
else
  case $1 in
    "-h") message 0; message 1; message 7;  exit 0;;
    "-v") message 0; exit 0;;
    "--help") message 0; message 1; message 7;  exit 0;;
    "--version") message 0; exit 0;;
  esac	
  if checkprog $PRG;
  then
    if readdevice $1 $2
    then
      echo ""
      exit 0
    else
      message 5
      exit 5
    fi
  else
   message 2
   exit 2
  fi
fi
