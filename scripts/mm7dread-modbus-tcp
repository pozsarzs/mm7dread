#!/bin/bash
# +----------------------------------------------------------------------------+
# | MM7DRead v0.4 * Status reader program for MM7D device                      |
# | Copyright (C) 2023 Pozs√°r Zsolt <pozsarzs@gmail.com>                       |
# | mm7dread-modbus-tcp                                                        |
# | Read all data from MM7D device with Modbus/TCP protocol                    |
# +----------------------------------------------------------------------------+

#   This program is free software: you can redistribute it and/or modify it
# under the terms of the European Union Public License 1.2 version.
#
#   This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.

# Exit codes:
#   0: normal exit
#   1: not enough parameter
#   2: there is not ... program
#   3: specified IP address is not valid
#   4: 
#   5: data retrieving error

# constants
PRGNAME="modpoll"
PRGARGS="-m tcp -a 1 -o 1 -1 -r 1"
# Used modpoll parameters:
#  -m tcp        MODBUS/TCP protocol
#  -a #          Slave address
#  -o #          Time-out in seconds
#  -1            Poll only once only
#  -r #          Start reference

# messages
MSG=("MM17DRead-Modbus/TCP data reader script v0.1\n" \
     "Usage:\n\t$0 IP_address\n\t$0 -h\n\t$0 --help\n\t$0 -v\n\t$0 --version\n" \
     "ERROR #2: There is not '"$PRGNAME"' program!" \
     "ERROR #3: Bad IP address!" \
     "ERROR #4: " \
     "ERROR #5: Data retrieving error!" \	
     "The '"$PRGNAME"' program required for the script to work\ncan be downloaded from https://www.modbusdriver.com/modpoll.html." \
     "\nRead discrete outputs (0xxxx):" \
     "\nRead discrete inputs (1xxxx):" \
     "\nRead input registers (3xxxx):" \
     "\nRead holding registers (4xxxx):")

function message()
{
  echo -e ${MSG[$1]}
}

function checkprog()
{
  
  if [ "$PRGNAME:" = "`whereis -b $PRGNAME`" ];
  then
    return 1
  else
    return 0
  fi
}

function checkipaddress()
{
  # Thanks Mitch Frazier for writing this function,
  #   because don't like fiddling with regex. :-)
  # https://www.linuxjournal.com/content/validating-ip-address-bash-script
  
  local ip=$1
  local stat=1
  
  if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]];
  then
    OIFS=$IFS
    IFS='.'
    ip=($ip)
    IFS=$OIFS
    [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 && \
      ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
    stat=$?
  fi
  return $stat
}

function readdevice()
{
  # Used modpoll parameters:
  #  -c #          Number of values to read
  #  -t 1          Discrete input data type
  #  -t 3          16-bit input register data type
  #  -t 4          16-bit output (holding) register data type (default)
  message 10
  if ! $PRGNAME $PRGARGS -c 3 -t 3 $1 | grep "\[";
  then
    return 1
  else
    message 9
    if ! $PRGNAME $PRGARGS -c 3 -t 1 $1 | grep "\[";
    then
      return 1
    else
      message 11
      if ! $PRGNAME $PRGARGS -c 28 -t 4 $1 | grep "\[";
      then
        return 1
      fi
      return 0
    fi
    return 0
  fi
  return 0
}

# main
if [ $# -eq 0 ]
then
  message 1
  exit 1
else
  case $1 in
    "-h") message 0; message 1; message 7;  exit 0;;
    "-v") message 0; exit 0;;
    "--help") message 0; message 1; message 7;  exit 0;;
    "--version") message 0; exit 0;;
  esac	
  if checkprog $PRG;
  then
    if checkipaddress $1;
    then
      if readdevice $1 $2
      then
        echo ""
        exit 0
      else
        message 5
        exit 5
      fi
    else
      message 3
      exit 3
    fi
  else
   message 2
   exit 2
  fi
fi
