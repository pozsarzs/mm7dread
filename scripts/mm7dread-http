#!/bin/bash
# +----------------------------------------------------------------------------+
# | MM7DRead v0.4 * Status reader program for MM7D device                      |
# | Copyright (C) 2023 Pozs√°r Zsolt <pozsarzs@gmail.com>                       |
# | mm7dread-http                                                              |
# | Read all data from MM7D device with HTTP                                   |
# +----------------------------------------------------------------------------+

#   This program is free software: you can redistribute it and/or modify it
# under the terms of the European Union Public License 1.2 version.
#
#   This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.

# Exit codes:
#   0: normal exit
#   1: not enough parameter
#   2: there is not ... program
#   3: specified IP address is not valid
#   4: specified format value is not valid
#   5: data retrieving error

# constants
PRGNAME="wget"
PRGARGS="--quiet --output-document -"
# messages
MSG=("MM17DRead-HTTP data reader script v0.1\n" \
     "Usage:\n\t$0 IP_address csv|json|txt|xml\n\t$0 -h\n\t$0 --help\n\t$0 -v\n\t$0 --version\n" \
     "ERROR #2: There is not '"$PRGNAME"' program!" \
     "ERROR #3: Bad IP address!" \
     "ERROR #4: Bad format!" \
     "ERROR #5: Data retrieving error!" \	
     "The '"$PRGNAME"' program required for the script to work\ncan be found in all Linux distributions,\ninstall it with the package manager.")

function message()
{
  echo -e ${MSG[$1]}
}

function checkprog()
{
  if [ "$PRGNAME:" = "`whereis -b $PRGNAME`" ];
  then
    return 1
  else
    return 0
  fi
}

function checkipaddress()
{
  # Thanks Mitch Frazier for writing this function,
  #   because don't like fiddling with regex. :-)
  # https://www.linuxjournal.com/content/validating-ip-address-bash-script
  
  local ip=$1
  local stat=1
  
  if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]];
  then
    OIFS=$IFS
    IFS='.'
    ip=($ip)
    IFS=$OIFS
    [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 && \
      ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
    stat=$?
  fi
  return $stat
}

function checkformat()
{
  local FORMAT="csv json txt xml"
  local i=1

  for x in $FORMAT
  do
    if [ $1 = $x ];
    then
      i=0
      break
    fi
  done
  return $i
}

function readdevice()
{
  if ! $PRGNAME $PRGARGS $1/get/$2;
  then
    return 1
  else
    return 0
  fi
  return 0
}


# main
if [ $# -eq 0 ]
then
  message 1
  exit 1
fi

if [ $# -lt 2 ];
then
  case $1 in
    "-h") message 0; message 1; message 7;  exit 0;;
    "-v") message 0; exit 0;;
    "--help") message 0; message 1; message 7;  exit 0;;
    "--version") message 0; exit 0;;
    *) message 1; exit 1;;
  esac	
else 
  if checkprog $PRG;
  then
    if checkipaddress $1;
    then
      if checkformat $2;
      then
        if readdevice $1 $2
        then
          echo ""
          exit 0
        else
          message 5
          exit 5
        fi
      else
        message 4
        exit 4
      fi
    else
      message 3
      exit 3
    fi
  else
   message 2
   exit 2
  fi
fi
